package StrassenMatrixMultiplication;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray88 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray89 = new int[][] { intArray76, intArray82, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication16.add(intArray70, intArray89);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication16.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication15.sub(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray9, intArray95, (int) '#', (int) (byte) 10);
        java.lang.Class<?> wildcardClass99 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray88 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray89 = new int[][] { intArray76, intArray82, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication16.add(intArray70, intArray89);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication16.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication15.sub(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray9, intArray95, (int) '#', (int) (byte) 10);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray79 = strassenMatrixMultiplication0.add(intArray77, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray1, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray22 = new int[][] { intArray9, intArray15, intArray21 };
        int[] intArray27 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray48 = new int[][] { intArray27, intArray32, intArray37, intArray42, intArray47 };
        int[][] intArray49 = strassenMatrixMultiplication3.multiply(intArray22, intArray48);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication2.multiply(intArray22, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray1, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication1.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray78, intArray84, (int) (short) 1, (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.sub(intArray11, intArray83);
        int[][] intArray87 = null;
        strassenMatrixMultiplication7.join(intArray83, intArray87, (int) (short) 100, (int) (short) 0);
        strassenMatrixMultiplication0.split(intArray6, intArray83, (int) (short) 100, (int) (short) 100);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray12, intArray61, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray74, 0, 0);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.add(intArray70, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) (short) 0, 10);
        strassenMatrixMultiplication1.split(intArray2, intArray11, (int) (byte) 0, (int) (short) 10);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray11, intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        java.lang.Class<?> wildcardClass93 = intArray23.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        java.lang.Class<?> wildcardClass93 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray88, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        int[][] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray14, intArray15, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.sub(intArray70, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray12, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication7.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray85, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray90, 0, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray86, intArray87, 10, 100);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (byte) 0, (int) (byte) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray80, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray95, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication21.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication93 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray94 = null;
        int[][] intArray95 = new int[][] {};
        strassenMatrixMultiplication93.split(intArray94, intArray95, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray92, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        int[] intArray94 = new int[] { '4', 1, (short) 100, ' ', (short) 1, (short) 0 };
        int[][] intArray95 = new int[][] { intArray94 };
        int[][] intArray96 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[52, 1, 100, 32, 1, 0]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray21, intArray77);
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray86, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray73, intArray77, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication8.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication2.sub(intArray91, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray92, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray89, (int) (short) 0, 0);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray89, intArray93);
        int[][] intArray95 = new int[][] {};
        strassenMatrixMultiplication0.join(intArray94, intArray95, 100, (int) (byte) 100);
        java.lang.Class<?> wildcardClass99 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray89, (int) (short) 0, 0);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray89, intArray93);
        int[][] intArray95 = new int[][] {};
        strassenMatrixMultiplication0.join(intArray94, intArray95, 100, (int) (byte) 100);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication47 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray65 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray66 = new int[][] { intArray53, intArray59, intArray65 };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray91 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray92 = new int[][] { intArray71, intArray76, intArray81, intArray86, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication47.multiply(intArray66, intArray92);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray66, intArray94, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray6, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray89);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication7.add(intArray63, intArray67);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray67, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray21, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        int[][] intArray22 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray54);
        strassenMatrixMultiplication16.split(intArray22, intArray82, (int) (short) 10, 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication27.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication6.sub(intArray93, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray94, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray71, intArray75, 100, 0);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray71, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray72, intArray77, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication92 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        strassenMatrixMultiplication92.split(intArray93, intArray94, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray87, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray71, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray89, (int) (short) 0, 0);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray89, intArray93);
        int[][] intArray95 = new int[][] {};
        strassenMatrixMultiplication0.join(intArray94, intArray95, 100, (int) (byte) 100);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray63 = new int[] { (short) 10, '#' };
        int[][] intArray64 = new int[][] { intArray63 };
        int[] intArray66 = new int[] { ' ' };
        int[] intArray68 = new int[] { ' ' };
        int[] intArray70 = new int[] { ' ' };
        int[] intArray72 = new int[] { ' ' };
        int[][] intArray73 = new int[][] { intArray66, intArray68, intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication1.multiply(intArray64, intArray73);
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray64, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[32]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[][] intArray62 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication63.sub(intArray71, intArray75);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray62, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = strassenMatrixMultiplication15.sub(intArray36, intArray92);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray36);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = strassenMatrixMultiplication15.sub(intArray36, intArray92);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray36);
        java.lang.Class<?> wildcardClass99 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray64 = strassenMatrixMultiplication0.multiply(intArray62, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = strassenMatrixMultiplication15.sub(intArray36, intArray92);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray36);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        int[] intArray69 = new int[] { (short) 10, '#' };
        int[][] intArray70 = new int[][] { intArray69 };
        int[] intArray72 = new int[] { ' ' };
        int[] intArray74 = new int[] { ' ' };
        int[] intArray76 = new int[] { ' ' };
        int[] intArray78 = new int[] { ' ' };
        int[][] intArray79 = new int[][] { intArray72, intArray74, intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication7.multiply(intArray70, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray6, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[32]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = strassenMatrixMultiplication15.sub(intArray36, intArray92);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray36);
        java.lang.Class<?> wildcardClass99 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray83, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        java.lang.Class<?> wildcardClass68 = intArray67.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray50);
        strassenMatrixMultiplication12.split(intArray18, intArray78, (int) (short) -1, (int) (byte) 100);
        int[][] intArray82 = null;
        strassenMatrixMultiplication6.join(intArray78, intArray82, (int) (byte) 100, 10);
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.sub(intArray82, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        int[][] intArray22 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray91 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray92 = new int[][] { intArray77, intArray84, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication23.sub(intArray43, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication16.add(intArray22, intArray43);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication15.sub(intArray22, intArray95);
        strassenMatrixMultiplication0.split(intArray14, intArray22, (int) (byte) 100, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.add(intArray78, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray81, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        java.lang.Class<?> wildcardClass68 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        int[][] intArray80 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray80, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray66, intArray69, (-1), (int) (byte) 100);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray73, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray68, intArray72);
        int[][] intArray74 = new int[][] {};
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, (int) ' ', (int) 'a');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        strassenMatrixMultiplication1.split(intArray7, intArray91, 100, 0);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray91, intArray98);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication8.split(intArray14, intArray74, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication1.split(intArray3, intArray74, (int) 'a', (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray74, intArray89, (int) ' ', (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        java.lang.Class<?> wildcardClass68 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication21.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray73, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication9.split(intArray17, intArray29, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication2.split(intArray8, intArray17, (int) ' ', 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.multiply(intArray1, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (byte) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication8.split(intArray14, intArray74, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication1.split(intArray3, intArray74, (int) 'a', (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray74, intArray89, (int) ' ', (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray6, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        int[][] intArray72 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray72, intArray75, (int) (short) 0, (int) (short) 100);
        int[][] intArray82 = null;
        strassenMatrixMultiplication0.join(intArray75, intArray82, (int) '4', (int) (short) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray8, intArray88);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray22 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray23 = new int[][] { intArray17, intArray22 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.sub(intArray23, intArray70);
        int[] intArray75 = new int[] { 100, '#', 10 };
        int[][] intArray76 = new int[][] { intArray75 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication12.split(intArray76, intArray79, (int) (short) 0, (int) (short) 0);
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray8, intArray76);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        java.lang.Class<?> wildcardClass74 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication61.sub(intArray69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray60, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication8.split(intArray14, intArray74, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication1.split(intArray3, intArray74, (int) 'a', (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray74, intArray89, (int) ' ', (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        java.lang.Class<?> wildcardClass74 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray69 = strassenMatrixMultiplication0.multiply(intArray65, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        java.lang.Class<?> wildcardClass81 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        java.lang.Class<?> wildcardClass74 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        java.lang.Class<?> wildcardClass81 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication60.sub(intArray68, intArray72);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray72, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray60, (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray64, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray1, intArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.sub(intArray11, intArray83);
        strassenMatrixMultiplication6.split(intArray7, intArray11, 0, 10);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray7, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray22, intArray74, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        strassenMatrixMultiplication12.split(intArray13, intArray17, 0, 10);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication6.sub(intArray17, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        java.lang.Class<?> wildcardClass67 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        java.lang.Class<?> wildcardClass67 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray88, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray67, intArray68, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        int[][] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray75, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray78, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray6, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray66, intArray69, (-1), (int) (byte) 100);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray89);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication7.sub(intArray14, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray88, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray37, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray14, intArray66);
        int[] intArray74 = new int[] { (byte) -1, 0, 100, (short) -1, (byte) 0, 10 };
        int[][] intArray75 = new int[][] { intArray74 };
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0, 100, -1, 0, 10]");
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray74, intArray75, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray16, intArray68);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray16, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        java.lang.Class<?> wildcardClass80 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        strassenMatrixMultiplication7.join(intArray75, intArray76, (int) (short) 1, (int) (short) 1);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication6.add(intArray75, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray80, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, 0, (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray85, (int) (byte) -1, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray72, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray6, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray67, intArray68, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray82, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        java.lang.Class<?> wildcardClass79 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, (int) ' ', (int) 'a');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) 'a', 1);
        int[][] intArray70 = null;
        int[] intArray71 = new int[] {};
        int[][] intArray72 = new int[][] { intArray71 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray70, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray77, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray13, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        int[][] intArray21 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        strassenMatrixMultiplication15.split(intArray21, intArray30, (-1), (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray14, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[] intArray71 = new int[] { (short) -1, (byte) -1 };
        int[] intArray74 = new int[] { (short) -1, (byte) -1 };
        int[] intArray77 = new int[] { (short) -1, (byte) -1 };
        int[] intArray80 = new int[] { (short) -1, (byte) -1 };
        int[] intArray83 = new int[] { (short) -1, (byte) -1 };
        int[][] intArray84 = new int[][] { intArray71, intArray74, intArray77, intArray80, intArray83 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray84, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) ' ', 100);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray82, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray76, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray59 = strassenMatrixMultiplication0.multiply(intArray57, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication61.sub(intArray69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray60, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        int[][] intArray28 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray60);
        strassenMatrixMultiplication22.split(intArray28, intArray88, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication15.split(intArray17, intArray88, (int) 'a', (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray14, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) -1, (int) (byte) 100);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray72, intArray76, (int) (byte) 100, 10);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray21 = new int[][] { intArray8, intArray14, intArray20 };
        int[] intArray26 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray47 = new int[][] { intArray26, intArray31, intArray36, intArray41, intArray46 };
        int[][] intArray48 = strassenMatrixMultiplication2.multiply(intArray21, intArray47);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray61 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray67 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray68 = new int[][] { intArray55, intArray61, intArray67 };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray93 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray94 = new int[][] { intArray73, intArray78, intArray83, intArray88, intArray93 };
        int[][] intArray95 = strassenMatrixMultiplication49.multiply(intArray68, intArray94);
        int[][] intArray96 = strassenMatrixMultiplication1.multiply(intArray48, intArray95);
        int[][] intArray97 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray95, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[][] intArray69 = strassenMatrixMultiplication0.sub(intArray14, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray28 = new int[][] { intArray27 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication23.sub(intArray28, intArray74);
        int[] intArray78 = new int[] { (short) 0 };
        int[] intArray80 = new int[] { (short) 0 };
        int[][] intArray81 = new int[][] { intArray78, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication22.multiply(intArray28, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        strassenMatrixMultiplication16.split(intArray82, intArray85, 0, (int) (byte) 1);
        int[][] intArray92 = null;
        strassenMatrixMultiplication15.join(intArray85, intArray92, (int) ' ', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray92, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray89, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.add(intArray1, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, (int) ' ', (int) 'a');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray26, intArray81, (int) 'a', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication0.join(intArray87, intArray91, (int) (short) 1, (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication2.sub(intArray10, intArray90);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.sub(intArray10, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray10, intArray95, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray13 = new int[][] { intArray7, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.sub(intArray13, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray13, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        java.lang.Class<?> wildcardClass82 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication21.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray85, (int) (byte) -1, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        strassenMatrixMultiplication2.join(intArray28, intArray83, (int) 'a', (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray83, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray33 = new int[][] { intArray32 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication28.sub(intArray33, intArray79);
        int[] intArray83 = new int[] { (short) 0 };
        int[] intArray85 = new int[] { (short) 0 };
        int[][] intArray86 = new int[][] { intArray83, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication27.multiply(intArray33, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication15.sub(intArray23, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray88, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        strassenMatrixMultiplication14.split(intArray22, intArray34, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) (short) 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray10, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray87, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        strassenMatrixMultiplication1.join(intArray69, intArray70, (int) (short) 1, (int) (short) 1);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray69, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.multiply(intArray70, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        java.lang.Class<?> wildcardClass85 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray14, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.sub(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 0, (int) (short) 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        int[] intArray67 = new int[] { (short) 10, (byte) 0, (-1), (byte) 100 };
        int[] intArray72 = new int[] { (short) 10, (byte) 0, (-1), (byte) 100 };
        int[] intArray77 = new int[] { (short) 10, (byte) 0, (-1), (byte) 100 };
        int[] intArray82 = new int[] { (short) 10, (byte) 0, (-1), (byte) 100 };
        int[] intArray87 = new int[] { (short) 10, (byte) 0, (-1), (byte) 100 };
        int[][] intArray88 = new int[][] { intArray67, intArray72, intArray77, intArray82, intArray87 };
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) '4', (int) '#');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray83, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.multiply(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        java.lang.Class<?> wildcardClass85 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.multiply(intArray70, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray80, intArray81, 10, 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.add(intArray87, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray13 = new int[][] { intArray7, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.sub(intArray13, intArray60);
        int[] intArray65 = new int[] { 100, '#', 10 };
        int[][] intArray66 = new int[][] { intArray65 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray66, intArray69, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray69, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray22 = new int[][] { intArray9, intArray15, intArray21 };
        int[] intArray27 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray48 = new int[][] { intArray27, intArray32, intArray37, intArray42, intArray47 };
        int[][] intArray49 = strassenMatrixMultiplication3.multiply(intArray22, intArray48);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication2.sub(intArray22, intArray69);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray1, intArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        int[][] intArray72 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray72, intArray75, (int) (short) 0, (int) (short) 100);
        int[][] intArray82 = null;
        strassenMatrixMultiplication0.join(intArray75, intArray82, (int) '4', (int) (short) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray87, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray82, 10, (int) (short) -1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray89, (-1), (int) (short) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray14, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication16.sub(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication15.add(intArray78, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray14, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray85, (int) (byte) -1, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication7.sub(intArray67, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray72, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray76, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray73, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray92, 100, 1);
        int[][] intArray96 = new int[][] {};
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.add(intArray96, intArray97);
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray92, 100, 1);
        int[][] intArray96 = new int[][] {};
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.add(intArray96, intArray97);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.add(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) 10, (int) '4');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        strassenMatrixMultiplication7.join(intArray75, intArray76, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication7.add(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray92, 100, 1);
        int[][] intArray96 = new int[][] {};
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.add(intArray96, intArray97);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        int[][] intArray26 = null;
        int[][] intArray27 = strassenMatrixMultiplication14.sub(intArray22, intArray26);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray42 = null;
        int[][] intArray43 = new int[][] {};
        strassenMatrixMultiplication41.split(intArray42, intArray43, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication47 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray65 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray66 = new int[][] { intArray53, intArray59, intArray65 };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray91 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray92 = new int[][] { intArray71, intArray76, intArray81, intArray86, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication47.multiply(intArray66, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication35.add(intArray43, intArray66);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication29.sub(intArray43, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication28.add(intArray96, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray26, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        int[] intArray71 = new int[] { (short) -1 };
        int[][] intArray72 = new int[][] { intArray71 };
        int[][] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray74 = strassenMatrixMultiplication0.multiply(intArray72, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray17, intArray69);
        int[][] intArray71 = null;
        strassenMatrixMultiplication2.join(intArray70, intArray71, (int) (short) 1, (int) (short) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication1.add(intArray70, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray77, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray8, intArray83, (-1), (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray89);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray74, 0, 0);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.add(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray66, intArray69, (-1), (int) (byte) 100);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray37, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray13, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray91, intArray92, 1, (int) (byte) 100);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        int[] intArray19 = new int[] { 0, 'a', (short) 100, ' ' };
        int[] intArray24 = new int[] { 0, 'a', (short) 100, ' ' };
        int[] intArray29 = new int[] { 0, 'a', (short) 100, ' ' };
        int[] intArray34 = new int[] { 0, 'a', (short) 100, ' ' };
        int[][] intArray35 = new int[][] { intArray19, intArray24, intArray29, intArray34 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray36 = strassenMatrixMultiplication0.sub(intArray14, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 97, 100, 32]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 97, 100, 32]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 97, 100, 32]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 97, 100, 32]");
        org.junit.Assert.assertNotNull(intArray35);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray63, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray79, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.add(intArray78, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray1, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        int[][] intArray24 = null;
        int[][] intArray25 = strassenMatrixMultiplication12.sub(intArray20, intArray24);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        int[][] intArray86 = null;
        strassenMatrixMultiplication12.join(intArray85, intArray86, 0, 0);
        strassenMatrixMultiplication0.split(intArray8, intArray85, (int) (byte) 1, 100);
        java.lang.Class<?> wildcardClass93 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        strassenMatrixMultiplication7.join(intArray75, intArray76, 1, (int) (short) -1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.sub(intArray88, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray6, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        int[][] intArray24 = null;
        int[][] intArray25 = strassenMatrixMultiplication12.sub(intArray20, intArray24);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        int[][] intArray86 = null;
        strassenMatrixMultiplication12.join(intArray85, intArray86, 0, 0);
        strassenMatrixMultiplication0.split(intArray8, intArray85, (int) (byte) 1, 100);
        java.lang.Class<?> wildcardClass93 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (short) 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        int[][] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray7, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        int[][] intArray24 = null;
        int[][] intArray25 = strassenMatrixMultiplication12.sub(intArray20, intArray24);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        int[][] intArray86 = null;
        strassenMatrixMultiplication12.join(intArray85, intArray86, 0, 0);
        strassenMatrixMultiplication0.split(intArray8, intArray85, (int) (byte) 1, 100);
        java.lang.Class<?> wildcardClass93 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray80, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        int[][] intArray27 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        strassenMatrixMultiplication21.split(intArray27, intArray87, (int) (short) 10, 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.sub(intArray87, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray62 = strassenMatrixMultiplication0.multiply(intArray60, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray64, intArray66, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray26, intArray81, (int) 'a', (int) (byte) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray37, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray72, intArray77, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        strassenMatrixMultiplication1.split(intArray7, intArray67, (int) (short) 10, 1);
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.multiply(intArray7, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray57, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray68, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray75, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray12, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication2.sub(intArray10, intArray90);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray10, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray70, intArray73, (-1), (int) (short) -1);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication1.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray78, intArray84, (int) (short) 1, (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication7.sub(intArray85, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray66 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray67 = new int[][] { intArray54, intArray60, intArray66 };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray92 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray77, intArray82, intArray87, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication48.multiply(intArray67, intArray93);
        int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray20, intArray67);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray49);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication12.sub(intArray26, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication11.add(intArray79, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.sub(intArray7, intArray79);
        strassenMatrixMultiplication2.split(intArray3, intArray7, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        strassenMatrixMultiplication2.join(intArray88, intArray92, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray1, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication1.join(intArray87, intArray91, (int) (short) 1, 100);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray95, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        int[][] intArray87 = null;
        int[] intArray94 = new int[] { 'a', (-1), (byte) 10, (byte) 100, (short) 100, (short) 100 };
        int[][] intArray95 = new int[][] { intArray94 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray87, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray83, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray92, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        java.lang.Class<?> wildcardClass90 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray89, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray95, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray74, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray60, intArray61, (int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.multiply(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray25 = new int[][] { intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication20.sub(intArray25, intArray71);
        int[] intArray75 = new int[] { (short) 0 };
        int[] intArray77 = new int[] { (short) 0 };
        int[][] intArray78 = new int[][] { intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication19.multiply(intArray25, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        strassenMatrixMultiplication13.split(intArray79, intArray82, 0, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication12.join(intArray82, intArray89, (int) ' ', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray7, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray68, intArray72, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication3.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication2.join(intArray86, intArray87, (int) (byte) 100, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray87, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray72, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        java.lang.Class<?> wildcardClass75 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication4.split(intArray12, intArray24, (int) (short) 0, 10);
        strassenMatrixMultiplication2.split(intArray3, intArray12, (int) (byte) 0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray1, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication0.split(intArray2, intArray92, (int) (short) -1, (int) (short) 1);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray85, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray79, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray76, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray81, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass94 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        java.lang.Class<?> wildcardClass75 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray76, intArray82, (int) (short) 10, (int) 'a');
        java.lang.Class<?> wildcardClass86 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        java.lang.Class<?> wildcardClass62 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray24 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray25 = new int[][] { intArray19, intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.sub(intArray25, intArray72);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray25, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        strassenMatrixMultiplication12.split(intArray20, intArray32, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) (short) 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication21.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        strassenMatrixMultiplication8.join(intArray73, intArray74, (int) '#', (int) ' ');
        int[][] intArray78 = null;
        strassenMatrixMultiplication2.join(intArray73, intArray78, 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray1, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray14, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.multiply(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray95, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray21, intArray76, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray76, intArray82, (int) (short) 10, (int) 'a');
        java.lang.Class<?> wildcardClass86 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray95, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        java.lang.Class<?> wildcardClass62 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        int[][] intArray70 = null;
        int[] intArray74 = new int[] { '4', (short) 100, (short) 0 };
        int[] intArray78 = new int[] { '4', (short) 100, (short) 0 };
        int[] intArray82 = new int[] { '4', (short) 100, (short) 0 };
        int[][] intArray83 = new int[][] { intArray74, intArray78, intArray82 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray70, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray76, intArray82, (int) (short) 10, (int) 'a');
        java.lang.Class<?> wildcardClass86 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray89);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray13, intArray88);
        int[] intArray93 = new int[] { (byte) 100, (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray93 };
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray84, intArray87);
        strassenMatrixMultiplication1.split(intArray2, intArray88, (int) (short) 0, 0);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray13, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray26 = new int[][] { intArray25 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication21.sub(intArray26, intArray72);
        int[] intArray76 = new int[] { (short) 0 };
        int[] intArray78 = new int[] { (short) 0 };
        int[][] intArray79 = new int[][] { intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication20.multiply(intArray26, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray80, intArray83, 0, (int) (byte) 1);
        strassenMatrixMultiplication7.split(intArray13, intArray83, (int) '#', (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray6, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.add(intArray82, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        java.lang.Class<?> wildcardClass94 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray79 = strassenMatrixMultiplication0.multiply(intArray77, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication21.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray22 = new int[][] { intArray9, intArray15, intArray21 };
        int[] intArray27 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray48 = new int[][] { intArray27, intArray32, intArray37, intArray42, intArray47 };
        int[][] intArray49 = strassenMatrixMultiplication3.multiply(intArray22, intArray48);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication2.multiply(intArray22, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray1, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray69 = strassenMatrixMultiplication0.multiply(intArray14, intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication15.split(intArray80, intArray84, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication15.add(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray14, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray50);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication13.sub(intArray27, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication12.add(intArray80, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication5.sub(intArray8, intArray80);
        strassenMatrixMultiplication3.split(intArray4, intArray8, (int) (short) 10, (int) (short) 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication2.sub(intArray8, intArray87);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray91, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray1, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray14, intArray84, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.sub(intArray11, intArray83);
        strassenMatrixMultiplication6.split(intArray7, intArray11, 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray11, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray64 = new int[] { (short) 0 };
        int[] intArray66 = new int[] { (short) 0 };
        int[][] intArray67 = new int[][] { intArray64, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication8.multiply(intArray14, intArray67);
        strassenMatrixMultiplication1.join(intArray4, intArray68, (int) (short) -1, (int) '#');
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray4, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[] intArray91 = new int[] { 'a' };
        int[] intArray93 = new int[] { 'a' };
        int[] intArray95 = new int[] { 'a' };
        int[] intArray97 = new int[] { 'a' };
        int[][] intArray98 = new int[][] { intArray91, intArray93, intArray95, intArray97 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray89, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[97]");
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass84 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[] intArray93 = new int[] { 0, (byte) 10 };
        int[] intArray96 = new int[] { 0, (byte) 10 };
        int[][] intArray97 = new int[][] { intArray93, intArray96 };
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication2.sub(intArray10, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray92, (int) (byte) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray92, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray57, intArray58, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) 'a', 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray86, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[] intArray72 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray76 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray80 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray84 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray76, intArray80, intArray84, intArray88, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray68, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (short) 10, (int) '4');
        java.lang.Class<?> wildcardClass91 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray89, intArray92);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray1, intArray94, 100, (int) '#');
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray23 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray24 = new int[][] { intArray18, intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.sub(intArray24, intArray71);
        int[] intArray76 = new int[] { 100, '#', 10 };
        int[][] intArray77 = new int[][] { intArray76 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication13.split(intArray77, intArray80, (int) (short) 0, (int) (short) 0);
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray9, intArray77);
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray77, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[] intArray72 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray76 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray80 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray84 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray76, intArray80, intArray84, intArray88, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray68, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray9, intArray89);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray9, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (short) 10, (int) '4');
        java.lang.Class<?> wildcardClass91 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (byte) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray9 = new int[] { (byte) 100, 'a', (short) 1 };
        int[] intArray13 = new int[] { (byte) 100, 'a', (short) 1 };
        int[] intArray17 = new int[] { (byte) 100, 'a', (short) 1 };
        int[] intArray21 = new int[] { (byte) 100, 'a', (short) 1 };
        int[] intArray25 = new int[] { (byte) 100, 'a', (short) 1 };
        int[] intArray29 = new int[] { (byte) 100, 'a', (short) 1 };
        int[][] intArray30 = new int[][] { intArray9, intArray13, intArray17, intArray21, intArray25, intArray29 };
        int[][] intArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray30, intArray31, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 97, 1]");
        org.junit.Assert.assertNotNull(intArray30);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[] intArray12 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[][] intArray13 = new int[][] { intArray6, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        int[][] intArray90 = new int[][] {};
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication15.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication14.sub(intArray92, intArray93);
        strassenMatrixMultiplication0.split(intArray13, intArray92, 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = intArray13.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[] intArray12 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[][] intArray13 = new int[][] { intArray6, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        int[][] intArray90 = new int[][] {};
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication15.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication14.sub(intArray92, intArray93);
        strassenMatrixMultiplication0.split(intArray13, intArray92, 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[] intArray72 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray76 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray80 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray84 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray76, intArray80, intArray84, intArray88, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray68, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray46, intArray48, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray89, intArray92);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray1, intArray94, 100, (int) '#');
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray94, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[] intArray72 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray76 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray80 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray84 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray76, intArray80, intArray84, intArray88, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray68, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray34 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray41 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray48 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray49 = new int[][] { intArray27, intArray34, intArray41, intArray48 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication20.sub(intArray49, intArray95);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray49);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray84, intArray90);
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray92, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication27.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication6.sub(intArray93, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray96, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray34 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray41 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray48 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray49 = new int[][] { intArray27, intArray34, intArray41, intArray48 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication20.sub(intArray49, intArray95);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray49);
        java.lang.Class<?> wildcardClass99 = intArray49.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.multiply(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray88, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray70, intArray73, (-1), (int) (short) -1);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[] intArray12 = new int[] { (short) 1, '4', (short) 100, (byte) -1, (-1) };
        int[][] intArray13 = new int[][] { intArray6, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        int[][] intArray90 = new int[][] {};
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication15.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication14.sub(intArray92, intArray93);
        strassenMatrixMultiplication0.split(intArray13, intArray92, 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 52, 100, -1, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray69 = strassenMatrixMultiplication0.multiply(intArray67, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray34 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray41 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray48 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray49 = new int[][] { intArray27, intArray34, intArray41, intArray48 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication20.sub(intArray49, intArray95);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray49);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray75, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray78, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray6, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) 100, (int) '#');
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication14.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray74, intArray77);
        strassenMatrixMultiplication6.split(intArray7, intArray78, 100, (int) '4');
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray7, intArray82, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray76, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray81, intArray87);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray95, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray86, intArray89);
        strassenMatrixMultiplication3.split(intArray4, intArray90, (int) (short) 0, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray90, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray1, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[] intArray80 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray81 = new int[][] { intArray80 };
        int[] intArray83 = new int[] { (short) 0 };
        int[][] intArray84 = new int[][] { intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication1.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray88, (int) (short) 0, (int) '4');
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.multiply(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray87, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        strassenMatrixMultiplication16.split(intArray24, intArray36, (int) 'a', (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication15.sub(intArray24, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray14, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray34 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray41 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray48 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray49 = new int[][] { intArray27, intArray34, intArray41, intArray48 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication20.sub(intArray49, intArray95);
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray14, intArray49);
        java.lang.Class<?> wildcardClass99 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        strassenMatrixMultiplication9.split(intArray10, intArray88, (int) (short) 10, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.add(intArray88, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray6, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) 100, (int) '#');
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.sub(intArray11, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray90, intArray94);
        strassenMatrixMultiplication0.split(intArray1, intArray90, (int) (short) -1, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray26 = new int[][] { intArray25 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication21.sub(intArray26, intArray72);
        int[] intArray76 = new int[] { (short) 0 };
        int[] intArray78 = new int[] { (short) 0 };
        int[][] intArray79 = new int[][] { intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication20.multiply(intArray26, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication8.sub(intArray16, intArray79);
        int[][] intArray82 = null;
        strassenMatrixMultiplication2.join(intArray81, intArray82, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = strassenMatrixMultiplication2.sub(intArray62, intArray63);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray67, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, (int) (short) 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass76 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.sub(intArray10, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray85, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray71, intArray75, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray84, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray89, 1, (int) (byte) 100);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[] intArray80 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray81 = new int[][] { intArray80 };
        int[] intArray83 = new int[] { (short) 0 };
        int[][] intArray84 = new int[][] { intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication1.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray88, (int) (short) 0, (int) '4');
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray9, intArray89);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray9, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray57, intArray58, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }
}


package InverseOfMatrix;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        java.lang.Class<?> wildcardClass72 = intArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray45.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = null;
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray94);
        java.lang.Class<?> wildcardClass98 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray63);
        java.lang.Class<?> wildcardClass68 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass32 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = null;
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = new double[][] {};
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray84);
        int[] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass76 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray91);
        java.lang.Class<?> wildcardClass97 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray69 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68 };
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray75);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass80 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[][] doubleArray29 = new double[][] { doubleArray20, doubleArray22, doubleArray24, doubleArray26, doubleArray28 };
        int[] intArray30 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray30);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray92);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray88);
        java.lang.Class<?> wildcardClass95 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        java.lang.Class<?> wildcardClass88 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass90 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = null;
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray91);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass69 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray79);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        double[] doubleArray6 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray13 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray20 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[][] doubleArray21 = new double[][] { doubleArray6, doubleArray13, doubleArray20 };
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        java.lang.Class<?> wildcardClass24 = doubleArray23.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, -1.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass38 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass83 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[][] doubleArray25 = new double[][] { doubleArray16, doubleArray18, doubleArray20, doubleArray22, doubleArray24 };
        int[] intArray26 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray26);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray26);
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray45 = new double[][] { doubleArray32, doubleArray36, doubleArray40, doubleArray44 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray57);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass69 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray62);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray51);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray76);
        java.lang.Class<?> wildcardClass83 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray28 = new double[][] { doubleArray15, doubleArray19, doubleArray23, doubleArray27 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[][] doubleArray39 = new double[][] { doubleArray30, doubleArray32, doubleArray34, doubleArray36, doubleArray38 };
        int[] intArray40 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray60);
        java.lang.Class<?> wildcardClass65 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass76 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray90 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray90);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass11 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = null;
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray81);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray68);
        java.lang.Class<?> wildcardClass72 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray78);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = null;
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray81);
        java.lang.Class<?> wildcardClass87 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass89 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray78);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass65 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = null;
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray36);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass45 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass81 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray20, doubleArray24, doubleArray28 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray41);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray66);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass71 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = null;
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray48);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray70);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        int[] intArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray16);
        java.lang.Class<?> wildcardClass20 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass65 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray87);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray66);
        java.lang.Class<?> wildcardClass69 = intArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        java.lang.Class<?> wildcardClass79 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray65);
        java.lang.Class<?> wildcardClass73 = intArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass60 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass90 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass65 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray89);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = null;
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray16);
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray79);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray79);
        java.lang.Class<?> wildcardClass85 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray44);
        java.lang.Class<?> wildcardClass50 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray86);
        java.lang.Class<?> wildcardClass92 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray73);
        java.lang.Class<?> wildcardClass81 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray88 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray89 = new double[][] { doubleArray67, doubleArray74, doubleArray81, doubleArray88 };
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = new double[][] {};
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        int[] intArray96 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray95, intArray96);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray96);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass58 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        java.lang.Class<?> wildcardClass57 = intArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray54 = new double[][] { doubleArray41, doubleArray45, doubleArray49, doubleArray53 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray66);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass75 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray47);
        double[][] doubleArray53 = null;
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass88 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray74);
        double[][] doubleArray78 = null;
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray47);
        double[][] doubleArray53 = null;
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray82);
        java.lang.Class<?> wildcardClass87 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = null;
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray87);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray91);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray71);
        java.lang.Class<?> wildcardClass78 = intArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray78 = null;
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray50 = new double[][] { doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray63);
        java.lang.Class<?> wildcardClass68 = intArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray55 = new double[][] { doubleArray33, doubleArray40, doubleArray47, doubleArray54 };
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray71);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray87);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = new double[][] {};
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = null;
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = null;
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass94 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass87 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray60 = new double[][] { doubleArray47, doubleArray51, doubleArray55, doubleArray59 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass80 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray85 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray86 = new double[][] { doubleArray64, doubleArray71, doubleArray78, doubleArray85 };
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray92);
        java.lang.Class<?> wildcardClass98 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray50 = new double[][] { doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass88 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = null;
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        java.lang.Class<?> wildcardClass88 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray92);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass85 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray20, doubleArray24, doubleArray28, doubleArray32 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray45);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray64);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass9 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass13 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = null;
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = new double[][] {};
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray72);
        java.lang.Class<?> wildcardClass80 = intArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass93 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray58);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass66 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass56 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray89);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass58 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray43);
        java.lang.Class<?> wildcardClass47 = intArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray62);
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray80 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray81 = new double[][] { doubleArray68, doubleArray72, doubleArray76, doubleArray80 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        java.lang.Class<?> wildcardClass24 = intArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        java.lang.Class<?> wildcardClass22 = doubleArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray94);
        java.lang.Class<?> wildcardClass99 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[][] doubleArray3 = null;
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray37);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray54 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53 };
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray67);
        java.lang.Class<?> wildcardClass73 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass65 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray71);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        int[] intArray84 = new int[] { ' ', '4', ' ', (byte) -1, 10, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 1, 2, 3, 4, 5]");
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray83);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass89 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray56);
        java.lang.Class<?> wildcardClass63 = intArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = null;
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray20, doubleArray24, doubleArray28, doubleArray32 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray45);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray75);
        java.lang.Class<?> wildcardClass81 = intArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] {};
        double[][] doubleArray45 = new double[][] { doubleArray44 };
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray92);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray75);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray56 = new double[][] { doubleArray43, doubleArray47, doubleArray51, doubleArray55 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray68);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass7 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray59);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray90);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass79 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass64 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass63 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray58);
        java.lang.Class<?> wildcardClass63 = intArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray72);
        double[][] doubleArray76 = null;
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass87 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = null;
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray42);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass51 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass84 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = null;
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass97 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass74 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = null;
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass89 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        int[] intArray40 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass66 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        java.lang.Class<?> wildcardClass21 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass99 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass60 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray90);
        java.lang.Class<?> wildcardClass95 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        double[] doubleArray6 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray13 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray20 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[][] doubleArray21 = new double[][] { doubleArray6, doubleArray13, doubleArray20 };
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, -1.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray88);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        int[] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass97 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        double[][] doubleArray47 = null;
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray79);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass87 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray83);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        int[] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray94);
        java.lang.Class<?> wildcardClass98 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass86 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        java.lang.Class<?> wildcardClass87 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray26 = new double[][] {};
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = new double[][] {};
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray75);
        java.lang.Class<?> wildcardClass86 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray80 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray81 = new double[][] { doubleArray59, doubleArray66, doubleArray73, doubleArray80 };
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass58 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[][] doubleArray26 = new double[][] { doubleArray17, doubleArray19, doubleArray21, doubleArray23, doubleArray25 };
        int[] intArray27 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray27);
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray57 = new double[][] { doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = null;
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray53);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        java.lang.Class<?> wildcardClass90 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray16);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray58);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass84 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray75);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray45);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray88);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass77 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = null;
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray95, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray89);
        java.lang.Class<?> wildcardClass93 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = null;
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray81);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray91);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray49);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray82);
        java.lang.Class<?> wildcardClass89 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray59);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray90);
        java.lang.Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = null;
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass98 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray60);
        java.lang.Class<?> wildcardClass65 = intArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray74);
        java.lang.Class<?> wildcardClass80 = intArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray94);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass75 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray80);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass87 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray84);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray64 = new double[][] { doubleArray51, doubleArray55, doubleArray59, doubleArray63 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray76);
        double[][] doubleArray80 = null;
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray95);
        java.lang.Class<?> wildcardClass99 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass40 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass82 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass22 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass43 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray91);
        java.lang.Class<?> wildcardClass99 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray62);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        int[] intArray27 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray27);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray27);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray27);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray27);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray91);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass39 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray91);
        java.lang.Class<?> wildcardClass97 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray77);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass85 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = null;
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray90);
        java.lang.Class<?> wildcardClass98 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass64 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        java.lang.Class<?> wildcardClass49 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass77 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray80);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = null;
        double[][] doubleArray19 = null;
        double[][] doubleArray20 = null;
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray54);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass37 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = null;
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray84 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray85 = new double[][] { doubleArray63, doubleArray70, doubleArray77, doubleArray84 };
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        int[] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[][] doubleArray33 = new double[][] { doubleArray24, doubleArray26, doubleArray28, doubleArray30, doubleArray32 };
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray34);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray81);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray71);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass78 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray84);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray82 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray83 = new double[][] { doubleArray61, doubleArray68, doubleArray75, doubleArray82 };
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass75 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = null;
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray54 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53 };
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray67);
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray86);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass42 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray83);
        java.lang.Class<?> wildcardClass91 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass41 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        java.lang.Class<?> wildcardClass53 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray62);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass39 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = null;
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray89);
        java.lang.Class<?> wildcardClass98 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass39 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        java.lang.Class<?> wildcardClass56 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass50 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass60 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass87 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        java.lang.Class<?> wildcardClass58 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        double[][] doubleArray26 = new double[][] {};
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray28);
        java.lang.Class<?> wildcardClass34 = intArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray79);
        java.lang.Class<?> wildcardClass83 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass79 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass70 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = new double[][] {};
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = null;
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        java.lang.Class<?> wildcardClass88 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray83);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass62 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = null;
        double[][] doubleArray43 = null;
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray60 = new double[][] { doubleArray47, doubleArray51, doubleArray55, doubleArray59 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = null;
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray86);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass94 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass58 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray58);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass64 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray80);
        java.lang.Class<?> wildcardClass85 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = null;
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray56 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55 };
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray72);
        java.lang.Class<?> wildcardClass79 = intArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = null;
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray86);
        int[] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray54 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53 };
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray83 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray84 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83 };
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray90);
        java.lang.Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = null;
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray85);
        java.lang.Class<?> wildcardClass94 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray70);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray47);
        java.lang.Class<?> wildcardClass52 = intArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray71);
        double[][] doubleArray75 = null;
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass75 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray74);
        double[][] doubleArray78 = null;
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray36);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray69);
        double[][] doubleArray73 = null;
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray89);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        java.lang.Class<?> wildcardClass80 = intArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray93);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        int[] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray56);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray88);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray88);
        java.lang.Class<?> wildcardClass96 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray86);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }
}


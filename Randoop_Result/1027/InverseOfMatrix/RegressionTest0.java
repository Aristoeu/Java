package InverseOfMatrix;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        com.thealgorithms.misc.InverseOfMatrix inverseOfMatrix0 = new com.thealgorithms.misc.InverseOfMatrix();
        java.lang.Class<?> wildcardClass1 = inverseOfMatrix0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        double[] doubleArray2 = new double[] { 0, 1 };
        double[] doubleArray5 = new double[] { 0, 1 };
        double[] doubleArray8 = new double[] { 0, 1 };
        double[] doubleArray11 = new double[] { 0, 1 };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        int[] intArray16 = new int[] { '#', (-1), '4' };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1, 2]");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[][] doubleArray3 = new double[][] { doubleArray0, doubleArray1, doubleArray2 };
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        java.lang.Class<?> wildcardClass13 = intArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[][] doubleArray6 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4, doubleArray5 };
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        double[] doubleArray1 = new double[] { 'a' };
        double[] doubleArray3 = new double[] { 'a' };
        double[] doubleArray5 = new double[] { 'a' };
        double[] doubleArray7 = new double[] { 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7 };
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[][] doubleArray4 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3 };
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        java.lang.Class<?> wildcardClass16 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        int[] intArray17 = new int[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0]");
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass2 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray37 = new int[] { (short) 0, '#', (short) 10, (short) 1, '#' };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 1, 2, 3, 4]");
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        java.lang.Class<?> wildcardClass13 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        java.lang.Class<?> wildcardClass48 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        java.lang.Class<?> wildcardClass49 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        java.lang.Class<?> wildcardClass31 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        java.lang.Class<?> wildcardClass48 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        java.lang.Class<?> wildcardClass48 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass3 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass3 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass31 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass32 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        java.lang.Class<?> wildcardClass49 = intArray45.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass32 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        java.lang.Class<?> wildcardClass91 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass5 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        java.lang.Class<?> wildcardClass55 = intArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        java.lang.Class<?> wildcardClass44 = intArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray58);
        java.lang.Class<?> wildcardClass63 = intArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass2 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass32 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        java.lang.Class<?> wildcardClass63 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        java.lang.Class<?> wildcardClass55 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        java.lang.Class<?> wildcardClass18 = intArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass4 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        java.lang.Class<?> wildcardClass51 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass30 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass92 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        java.lang.Class<?> wildcardClass58 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        double[][] doubleArray0 = null;
        double[] doubleArray2 = new double[] { 1 };
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[][] doubleArray11 = new double[][] { doubleArray2, doubleArray4, doubleArray6, doubleArray8, doubleArray10 };
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray74);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass5 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray20 = new double[][] { doubleArray7, doubleArray11, doubleArray15, doubleArray19 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray32);
        java.lang.Class<?> wildcardClass37 = intArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        java.lang.Class<?> wildcardClass78 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass30 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        int[] intArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass96 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass51 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        java.lang.Class<?> wildcardClass48 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        int[] intArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        java.lang.Class<?> wildcardClass77 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        java.lang.Class<?> wildcardClass51 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass4 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass52 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        java.lang.Class<?> wildcardClass38 = intArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        java.lang.Class<?> wildcardClass82 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        java.lang.Class<?> wildcardClass16 = intArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray72);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass52 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        java.lang.Class<?> wildcardClass18 = intArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass95 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass31 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        java.lang.Class<?> wildcardClass58 = intArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        java.lang.Class<?> wildcardClass48 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass34 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        java.lang.Class<?> wildcardClass63 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray72);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray91);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass52 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass37 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray80);
        java.lang.Class<?> wildcardClass87 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        java.lang.Class<?> wildcardClass63 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass3 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        java.lang.Class<?> wildcardClass88 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        java.lang.Class<?> wildcardClass59 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        java.lang.Class<?> wildcardClass58 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        java.lang.Class<?> wildcardClass98 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass59 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        java.lang.Class<?> wildcardClass97 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        java.lang.Class<?> wildcardClass77 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass89 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass19 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        java.lang.Class<?> wildcardClass82 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass35 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        java.lang.Class<?> wildcardClass18 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray64 = new double[][] { doubleArray42, doubleArray49, doubleArray56, doubleArray63 };
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[] doubleArray94 = new double[] { 1 };
        double[][] doubleArray95 = new double[][] { doubleArray86, doubleArray88, doubleArray90, doubleArray92, doubleArray94 };
        int[] intArray96 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray95, intArray96);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray96);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        java.lang.Class<?> wildcardClass67 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        java.lang.Class<?> wildcardClass96 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        java.lang.Class<?> wildcardClass84 = intArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        java.lang.Class<?> wildcardClass48 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        java.lang.Class<?> wildcardClass18 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass83 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        java.lang.Class<?> wildcardClass38 = intArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass5 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        java.lang.Class<?> wildcardClass65 = intArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass6 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        java.lang.Class<?> wildcardClass43 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass5 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        java.lang.Class<?> wildcardClass38 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass5 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass32 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass56 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass43 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        java.lang.Class<?> wildcardClass42 = intArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        java.lang.Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        int[] intArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"index\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        java.lang.Class<?> wildcardClass58 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass41 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass4 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        java.lang.Class<?> wildcardClass65 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass49 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray91);
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass51 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        java.lang.Class<?> wildcardClass4 = intArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        java.lang.Class<?> wildcardClass43 = intArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass4 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        java.lang.Class<?> wildcardClass35 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        int[] intArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        java.lang.Class<?> wildcardClass63 = intArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        int[] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray32);
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray51 = new double[][] { doubleArray38, doubleArray42, doubleArray46, doubleArray50 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray63);
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray79);
        java.lang.Class<?> wildcardClass84 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        java.lang.Class<?> wildcardClass65 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        int[] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray64);
        java.lang.Class<?> wildcardClass68 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray51);
        java.lang.Class<?> wildcardClass58 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        double[][] doubleArray0 = null;
        double[] doubleArray2 = new double[] { 1 };
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[][] doubleArray11 = new double[][] { doubleArray2, doubleArray4, doubleArray6, doubleArray8, doubleArray10 };
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray12);
        java.lang.Class<?> wildcardClass15 = intArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass51 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray64 = new double[][] { doubleArray51, doubleArray55, doubleArray59, doubleArray63 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        java.lang.Class<?> wildcardClass80 = intArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        int[] intArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        java.lang.Class<?> wildcardClass82 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass63 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass83 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass69 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        java.lang.Class<?> wildcardClass89 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray64 = new double[][] { doubleArray42, doubleArray49, doubleArray56, doubleArray63 };
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray77);
        java.lang.Class<?> wildcardClass83 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray51);
        java.lang.Class<?> wildcardClass58 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass73 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        java.lang.Class<?> wildcardClass83 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        java.lang.Class<?> wildcardClass20 = doubleArray17.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass33 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray79);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray95);
        java.lang.Class<?> wildcardClass99 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray89);
        java.lang.Class<?> wildcardClass94 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass32 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass57 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass98 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass55 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        java.lang.Class<?> wildcardClass43 = intArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass37 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass84 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass67 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass82 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        int[] intArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        java.lang.Class<?> wildcardClass49 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass66 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        double[] doubleArray1 = new double[] { 0 };
        double[] doubleArray3 = new double[] { 0 };
        double[] doubleArray5 = new double[] { 0 };
        double[] doubleArray7 = new double[] { 0 };
        double[] doubleArray9 = new double[] { 0 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        java.lang.Class<?> wildcardClass55 = intArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray93);
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass79 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass20 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass49 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass67 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass52 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass49 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass68 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass42 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        java.lang.Class<?> wildcardClass83 = intArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray72);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray91);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        java.lang.Class<?> wildcardClass94 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass32 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        java.lang.Class<?> wildcardClass62 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        java.lang.Class<?> wildcardClass42 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        java.lang.Class<?> wildcardClass56 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass61 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray93);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = null;
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray64);
        java.lang.Class<?> wildcardClass68 = intArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass3 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass52 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass32 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        java.lang.Class<?> wildcardClass71 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        int[] intArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass44 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass93 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        java.lang.Class<?> wildcardClass78 = intArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass56 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass94 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass89 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        java.lang.Class<?> wildcardClass88 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray86);
        java.lang.Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        java.lang.Class<?> wildcardClass81 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass31 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray78);
        java.lang.Class<?> wildcardClass84 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray86);
        java.lang.Class<?> wildcardClass93 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        java.lang.Class<?> wildcardClass58 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass72 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray94);
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        java.lang.Class<?> wildcardClass82 = intArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        java.lang.Class<?> wildcardClass12 = intArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass53 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray56);
        java.lang.Class<?> wildcardClass63 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        java.lang.Class<?> wildcardClass72 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        java.lang.Class<?> wildcardClass67 = intArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray83);
        java.lang.Class<?> wildcardClass88 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        java.lang.Class<?> wildcardClass79 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        java.lang.Class<?> wildcardClass54 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        java.lang.Class<?> wildcardClass56 = intArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        java.lang.Class<?> wildcardClass59 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass18 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass50 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass82 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = null;
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray36);
        java.lang.Class<?> wildcardClass42 = intArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass33 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray58);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass36 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        double[][] doubleArray47 = null;
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray79);
        java.lang.Class<?> wildcardClass86 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass49 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray84);
        java.lang.Class<?> wildcardClass90 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass19 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        java.lang.Class<?> wildcardClass59 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        java.lang.Class<?> wildcardClass72 = intArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        java.lang.Class<?> wildcardClass97 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass65 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        java.lang.Class<?> wildcardClass66 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        java.lang.Class<?> wildcardClass51 = intArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        java.lang.Class<?> wildcardClass94 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass6 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass6 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray73);
        java.lang.Class<?> wildcardClass79 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        java.lang.Class<?> wildcardClass80 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        java.lang.Class<?> wildcardClass90 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        java.lang.Class<?> wildcardClass87 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        java.lang.Class<?> wildcardClass37 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        java.lang.Class<?> wildcardClass83 = intArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass75 = doubleArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass5 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray51);
        java.lang.Class<?> wildcardClass55 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass34 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass74 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        java.lang.Class<?> wildcardClass66 = intArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass51 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray49 = new double[][] { doubleArray36, doubleArray40, doubleArray44, doubleArray48 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray61);
        int[] intArray71 = new int[] { '#', (byte) 100, 0, (short) 100, 10, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 1, 2, 3, 4, 5]");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray80 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray87 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray88 = new double[][] { doubleArray66, doubleArray73, doubleArray80, doubleArray87 };
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass54 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass64 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass6 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass42 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass88 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray88);
        java.lang.Class<?> wildcardClass95 = intArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass13 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass58 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        java.lang.Class<?> wildcardClass56 = intArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray67);
        java.lang.Class<?> wildcardClass70 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray79);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray95);
        java.lang.Class<?> wildcardClass99 = intArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        java.lang.Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass79 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        java.lang.Class<?> wildcardClass81 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        java.lang.Class<?> wildcardClass56 = intArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        java.lang.Class<?> wildcardClass62 = intArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        double[][] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray17 = new double[][] { doubleArray4, doubleArray8, doubleArray12, doubleArray16 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray29);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray50);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray81);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass89 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass97 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        int[] intArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        java.lang.Class<?> wildcardClass88 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass59 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass53 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass55 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass6 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass36 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray21);
        java.lang.Class<?> wildcardClass25 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass4 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass60 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray53);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[][] doubleArray26 = new double[][] { doubleArray17, doubleArray19, doubleArray21, doubleArray23, doubleArray25 };
        int[] intArray27 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray27);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray27);
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray46 = new double[][] { doubleArray33, doubleArray37, doubleArray41, doubleArray45 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray58);
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray77);
        java.lang.Class<?> wildcardClass84 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass44 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray70 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69 };
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray76);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass50 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass72 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass43 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        java.lang.Class<?> wildcardClass67 = intArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        java.lang.Class<?> wildcardClass69 = intArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = null;
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray82);
        java.lang.Class<?> wildcardClass90 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }
}

